var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { ReactChildren } from 'tcomb-react';
import { enums, maybe, struct, Boolean as tcombBoolean, Object as tcombObject, String as tcombString } from 'tcomb';

import { getCountries } from '../functions/countries';

var strict = true;

var addKeyToObj = function addKeyToObj(retObj, curObj) {
  return _extends({}, retObj, _defineProperty({}, curObj.code, curObj.name));
};

var countriesKeyValue = getCountries().reduce(addKeyToObj, {});

var FlagIconSizeType = enums.of(['lg', '2x', '3x', '4x', '5x'], 'FlagIconSizeType');
var FlagIconRotateType = enums.of([30, 60, 90, 180, 270], 'FlagIconRotateType');
var FlagIconFlipType = enums.of(['horizontal', 'vertical'], 'FlagIconFlipType');
var FlagIconCodeType = enums(countriesKeyValue, 'FlagIconCodeType');

export var FlagIconClassesObjectTypeTcomb = struct({
  code: FlagIconCodeType,
  size: maybe(FlagIconSizeType),
  squared: maybe(tcombBoolean),
  rotate: maybe(FlagIconRotateType),
  flip: maybe(FlagIconFlipType)
}, 'FlagIconClassesObjectType');

export var FlagIconPropsTypeTcomb = FlagIconClassesObjectTypeTcomb.extend({
  Component: maybe(tcombString),
  children: maybe(ReactChildren)
}, { name: 'FlagIconPropsType', strict: strict });

export var FlagIconOptionsTypeTcomb = struct({
  useCssModules: tcombBoolean,
  themeStyles: maybe(tcombObject)
}, { name: 'FlagIconOptionsType', strict: strict });