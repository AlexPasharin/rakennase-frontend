var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

export { default as makeClassnames, makeClassesObject } from './classnames';
export { default as makeFlagIconOptions } from './options';
export { default as makeStyles } from './styles';
import * as _countries from './countries';
export { _countries as countries };
import * as _constants from './constants';
export { _constants as constants };


export var objectKeysApplyFn = function objectKeysApplyFn(obj, fn) {
  return Object.keys(obj).reduce(function (rObj, key) {
    return _extends({}, rObj, _defineProperty({}, fn(key), obj[key]));
  }, {});
};

export var diffArrays = function diffArrays(arA, arB) {
  var arrays = arA.length > arB.length ? [arA, arB] : [arB, arA];
  return arrays[0].filter(function (newArElem) {
    return !arrays[1].includes(newArElem);
  });
};