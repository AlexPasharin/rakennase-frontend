var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import classnames from 'classnames';

import { baseThemeStyleName, flagIconClassesPrefix, flagIconClassesPrefixName } from './constants';

var makeClassesObject = function makeClassesObject(_ref, options) {
  var _obj;

  var props = _objectWithoutProperties(_ref, []),
      code = _ref.code,
      _ref$flip = _ref.flip,
      flip = _ref$flip === undefined ? '' : _ref$flip,
      _ref$size = _ref.size,
      size = _ref$size === undefined ? '' : _ref$size,
      _ref$squared = _ref.squared,
      squared = _ref$squared === undefined ? false : _ref$squared,
      rotate = _ref.rotate;

  var obj = (_obj = {}, _defineProperty(_obj, flagIconClassesPrefixName, true), _defineProperty(_obj, flagIconClassesPrefix + 'squared', squared), _defineProperty(_obj, '' + flagIconClassesPrefix + size, size), _defineProperty(_obj, '' + flagIconClassesPrefix + code, code), _defineProperty(_obj, flagIconClassesPrefix + 'flip-' + flip, flip), _defineProperty(_obj, flagIconClassesPrefix + 'rotate-' + (rotate || ''), rotate), _defineProperty(_obj, baseThemeStyleName, options.useCssModules && options.themeStyles), _obj);

  if (props.className && options.useCssModules) {
    obj = _extends({}, obj, _defineProperty({}, props.className, true));
  }
  return obj;
};

export { makeClassesObject };
export default (function (props, options) {
  return classnames(makeClassesObject(props, options));
});